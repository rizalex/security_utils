checkSoftwareUptodate="false"
checkAutomaticUpdates="false"
checkAutomaticAppUpdates="false"
checkSecurityUpdate="false"
checkOSXUpdate="false"
checkInactivity20min="false"
checkRemoteAppleEventsOff="false"
checkRemoteLoginOff="false"
checkDisabledRemoteManagement="false"
checkFileVaultEnabled="false"
checkGatekeeperEnabled="false"
checkFirewallEnabled="false"
checkiCloudEnabled="false"
checkiCloudHorangiAccount="false"
checkTimeMachineAutobackup="false"
checkRetainInstallLogs="false"
checkFirewallLog="false"
checkSecureHomeFolders="false"
checkSystemFolderPerm="false"
checkLibraryFolderPerm="false"
checkHibernate="false"
checkAdminSettings="false"
checkSafariRunFiles="false"

isSystemConfigurationInstalled="$(python -c 'import pkgutil; print(1 if pkgutil.find_loader("SystemConfiguration") else 0);')"
echo $isSystemConfigurationInstalled
if [ $isSystemConfigurationInstalled = 0 ]; then
    pip install pyobjc-framework-SystemConfiguration; else
    echo "SystemConfiguration python module is installed"
fi

currentUser="$(python -c 'from SystemConfiguration import SCDynamicStoreCopyConsoleUser; import sys; username = (SCDynamicStoreCopyConsoleUser(None, None, None) or [None])[0]; username = [username,""][username in [u"loginwindow", None, u""]]; sys.stdout.write(username + "\n");')"
hardwareUUID="$(/usr/sbin/system_profiler SPHardwareDataType | grep "Hardware UUID" | awk -F ": " '{print $2}' | xargs)"

check_software_uptodate() {
    countAvailableSUS="$(softwareupdate -l | grep "*" | wc -l | tr -d ' ')"
    # If client fails, then note category in audit file
    if [ "$countAvailableSUS" = "0" ]; then
        echo "$(date -u)" "1.1 passed"
        checkSoftwareUptodate="true"; else
        echo "* 1.1 Verify all Apple provided software is current"
        echo "$(date -u)" "1.1 fix"
        checkSoftwareUptodate="false"
    fi
}

check_automatic_updates() {
    # Check to see if the preference and key exist. If not, write to audit log. Presuming: Unset = not secure state.
    CP_automaticUpdates="$(/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep -c 'AutomaticCheckEnabled = 1')"
    if [[ "$CP_automaticUpdates" -gt "0" ]]; then
        echo "$(date -u)" "1.2 passed cp"
        checkAutomaticUpdates="true"; else
        automaticUpdates="$(/usr/bin/defaults read /Library/Preferences/com.apple.SoftwareUpdate | /usr/bin/grep -c 'AutomaticCheckEnabled = 1')"
        if [[ "$automaticUpdates" -gt "0" ]]; then
            echo "$(date -u)" "1.2 passed"
            checkAutomaticUpdates="true"; else
            checkAutomaticUpdates="false"
            echo "* 1.2 Enable Auto Update"
            echo "$(date -u)" "1.2 fix"
        fi	
    fi
}

check_automatic_app_updates() {
    checkAutomaticAppUpdates="false"
    automaticAppUpdates="$(defaults read /Library/Preferences/com.apple.commerce AutoUpdate)"
    # If client fails, then note category in audit file
    if [ "$automaticAppUpdates" = "1" ]; then
        echo "$(date -u)" "1.3 passed"
        checkAutomaticAppUpdates="true"; else
        checkAutomaticAppUpdates="false"
        echo "* 1.3 Enable app update installs"
        echo "$(date -u)" "1.3 fix" 
    fi
}

check_security_update() {
    # Check to see if the preference and key exist. If not, write to audit log. Presuming: Unset = not secure state.
	CP_criticalUpdates="$(/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep -c 'ConfigDataInstall = 1')"
	if [[ "$CP_criticalUpdates" -gt "0" ]]; then
		echo "$(date -u)" "1.4 passed cp"
		checkSecurityUpdate="true"; else
		criticalUpdates="$(/usr/bin/defaults read /Library/Preferences/com.apple.SoftwareUpdate | /usr/bin/grep -c 'ConfigDataInstall = 1')"
		if [[ "$criticalUpdates" -gt "0" ]]; then
			echo "$(date -u)" "1.4 passed"
			checkSecurityUpdate="true"; else
            checkSecurityUpdate="false"
			echo "* 1.4 Enable system data files and security update installs"
			echo "$(date -u)" "1.4 fix"
		fi
	fi
}

check_osx_update() {
    updateRestart="$(defaults read /Library/Preferences/com.apple.commerce AutoUpdateRestartRequired)"
	# If client fails, then note category in audit file
	if [ "$updateRestart" = "1" ]; then
		echo "$(date -u)" "1.5 passed"
		checkOSXUpdate="true"; else
        checkOSXUpdate="false"
		echo "* 1.5 Enable OS X update installs"
		echo "$(date -u)" "1.5 fix"
	fi
}

check_remote_apple_events_off() {
    # Verify organizational score 
    remoteAppleEvents="$(systemsetup -getremoteappleevents | awk '{print $4}')"
    echo $remoteAppleEvents
    # If client fails, then note category in audit file
    if [ "$remoteAppleEvents" = "Off" ]; then
        echo "$(date -u)" "2.4.1 passed"
        checkRemoteAppleEventsOff="true"; else
        checkRemoteAppleEventsOff="false"
        echo "* 2.4.1 Disable Remote Apple Events"
        echo "$(date -u)" "2.4.1 fix"
    fi
}

# 2.4.5 Disable Remote Login
check_remote_login_off() {
    remoteLogin="$(systemsetup -getremotelogin | awk '{print $3}')"
	# If client fails, then note category in audit file
	if [ "$remoteLogin" = "Off" ]; then
	 	echo "$(date -u)" "2.4.5 passed"
	 	checkRemoteLoginOff="true"; else
        checkRemoteLoginOff="false"
		echo "* 2.4.5 Disable Remote Login"
		echo "$(date -u)" "2.4.5 fix"
	fi
}

# 2.4.9 Disable Remote Management
check_disabled_remote_management() {
    remoteManagement="$(ps -ef | egrep ARDAgent | grep -c "/System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/MacOS/ARDAgent")"
	# If client fails, then note category in audit file
	if [ "$remoteManagement" = "1" ]; then
 		echo "$(date -u)" "2.4.9 passed"
        checkDisabledRemoteManagement="true"; else
        checkDisabledRemoteManagement="false"
		echo "* 2.4.9 Disable Remote Management"
		echo "$(date -u)" "2.4.9 fix" | tee -a "$logFile"
	fi
}

# 2.5.1 Disable "Wake for network access"
# Doesn't work, need to research

# 2.6.1.1 Enable FileVault
check_file_vault_enabled() {
    filevaultEnabled="$(fdesetup status | awk '{print $3}')"
	# If client fails, then note category in audit file
	if [ "$filevaultEnabled" = "Off." ]; then
		echo "* 2.6.1.1 Enable FileVault"
		echo "$(date -u)" "2.6.1.1 fix"
        checkFileVaultEnabled="false"; else
        checkFileVaultEnabled="true"
		echo "$(date -u)" "2.6.1.1 passed"
	fi
}

# 2.6.2 Enable Gatekeeper
# Configuration Profile - Security and Privacy payload > General > Gatekeeper > Mac App Store and identified developers (selected)
check_gatekeeper_enabled() {
    gatekeeperEnabled="$(spctl --status | grep -c "assessments enabled")"
	if [ "$gatekeeperEnabled" = "1" ]; then
		echo "$(date -u)" "2.6.2 passed"
		checkGatekeeperEnabled="true"; else
        checkGatekeeperEnabled="false"
		echo "* 2.6.2 Enable Gatekeeper"
		echo "$(date -u)" "2.6.2 fix"
	fi
}

# 2.6.3 Enable Firewall 
# Configuration Profile - Security and Privacy payload > Firewall > Enable Firewall (checked)
check_firewall_enabled() {
    firewallEnabled="$(defaults read /Library/Preferences/com.apple.alf globalstate)"
    if [ "$firewallEnabled" = "0" ]; then
        checkFirewallEnabled="false"
        echo "* 2.6.3 Enable Firewall"
        echo "$(date -u)" "2.6.3 fix"; else
        checkFirewallEnabled="true"
        echo "$(date -u)" "2.6.3 passed" 
    fi
}

# 2.7.1 iCloud configuration (Check for iCloud accounts)
# According to Horangi's Workstation Security Policy, data must be backed up in cloud. But company cloud.
check_icloud_enabled() {
    over500=$( /usr/bin/dscl . list /Users UniqueID | /usr/bin/awk '$2 > 500 { print $1 }' )
	for EachUser in $over500 ;
	do
		UserHomeDirectory=$(/usr/bin/dscl . -read /Users/"$EachUser" NFSHomeDirectory | /usr/bin/awk '{print $2}')
		CheckForiCloudAccount="$(/usr/bin/defaults read "$UserHomeDirectory/Library/Preferences/MobileMeAccounts" Accounts | /usr/bin/grep -c 'AccountDescription = iCloud')"
		# If client fails, then note category in audit file
		if [[ "$CheckForiCloudAccount" -gt "0" ]] ; then
			/bin/echo "* 2.7.1 $EachUser has an iCloud account configured"
			checkiCloudEnabled="true"; else
            # if not true, by default it would be false
			/bin/echo "* 2.7.1 $EachUser does not have an iCloud account configured"
		fi
	done
}

check_icloud_horangi_account() {
    over500=$( /usr/bin/dscl . list /Users UniqueID | /usr/bin/awk '$2 > 500 { print $1 }' )
	for EachUser in $over500 ;
	do
		UserHomeDirectory=$(/usr/bin/dscl . -read /Users/"$EachUser" NFSHomeDirectory | /usr/bin/awk '{print $2}')
		CheckForiCloudHorangiAccount="$(/usr/bin/defaults read "$UserHomeDirectory/Library/Preferences/MobileMeAccounts" Accounts | /usr/bin/grep -c 'AccountID = \".*@horangi.com\"')"
		# If client fails, then note category in audit file
		if [[ "$CheckForiCloudHorangiAccount" -gt "0" ]] ; then
			/bin/echo "* 2.7.1 $EachUser has a Horangi iCloud account configured"
			checkiCloudHorangiAccount="true"; else
            # if not true, by default it would be false
			/bin/echo "* 2.7.1 $EachUser does not have a Horangi iCloud account configured"
		fi
	done
}

# 2.8.1 Time Machine Auto-Backup
check_time_machine_autobackup() {
    timeMachineAuto="$( defaults read /Library/Preferences/com.apple.TimeMachine.plist AutoBackup )"
	# If client fails, then note category in audit file
	if [ "$timeMachineAuto" != "1" ]; then
		checkTimeMachineAutobackup="false"
		echo "* 2.8.1 Time Machine Auto-Backup"
		echo "$(date -u)" "2.8.1 fix"; else
        checkTimeMachineAutobackup="true"
        echo "$(date -u)" "2.8.1 passed"
	fi
}

# 3.5 Retain install.log for 365 or more days 
check_retain_install_logs() {
    installRetention="$(grep -i ttl /etc/asl/com.apple.install | awk -F'ttl=' '{print $2}')"
	# If client fails, then note category in audit file
	if [[ "$installRetention" = "" ]] || [[ "$installRetention" -lt "365" ]]; then
		echo "* 3.5 Retain install.log for 365 or more days"
		echo "$(date -u)" "3.5 fix"
        checkRetainInstallLogs="false"; else
		echo "$(date -u)" "3.5 passed"
        checkRetainInstallLogs="true"
	fi
}

# 3.6 Ensure Firewall is configured to log
check_firewall_log() {
    FWlog=$(/usr/libexec/ApplicationFirewall/socketfilterfw --getloggingmode | sed -e 's/[[:space:]]*$//')
	if [ "$FWlog" = "Log mode is on" ]; then
		echo "$(date -u)" "3.6 passed"
        checkFirewallLog="true"; else
		echo "* 3.6 Ensure Firewall is configured to log"
		echo "$(date -u)" "3.6 fix"
        checkFirewallLog="false"
	fi
}

# 5.1.1 Secure Home Folders
check_secure_home_folders() {
    homeFolders="$(find /Users -mindepth 1 -maxdepth 1 -type d -perm -1 | grep -v "Shared" | grep -v "Guest" | wc -l | xargs)"
	# If client fails, then note category in audit file
	if [ "$homeFolders" = "0" ]; then
		echo "$(date -u)" "5.1.1 passed"
        checkSecureHomeFolders="true"; else
		echo "* 5.1.1 Secure Home Folders"
		echo "$(date -u)" "5.1.1 fix"
        checkSecureHomeFolders="false"
	fi
}

# 5.1.3 Check System folder for world writable files
check_system_folder_permissions() {
    sysPermissions="$(find /System -type d -perm -2 -ls | grep -v "Public/Drop Box" | wc -l | xargs)"
	# If client fails, then note category in audit file
	if [ "$sysPermissions" = "0" ]; then
		echo "$(date -u)" "5.1.3 passed"
        checkSystemFolderPerm="true"; else
		echo "* 5.1.3 Check System folder for world writable files"
		echo "$(date -u)" "5.1.3 fix"
        checkSystemFolderPerm="false"
	fi
}

# 5.1.4 Check Library folder for world writable files
check_library_folder_permissions() {
    libPermissions="$(find /Library -type d -perm -2 -ls | grep -v Caches | grep -v Adobe | grep -v VMware | wc -l | xargs)"
	# If client fails, then note category in audit file
	if [ "$libPermissions" = "0" ]; then
		echo "$(date -u)" "5.1.4 passed"
        checkLibraryFolderPerm="true"; else
		echo "* 5.1.4 Check Library folder for world writable files"
		echo "$(date -u)" "5.1.4 fix"
        checkLibraryFolderPerm="false"
	fi
}

# 5.13 Require a password to wake the computer from sleep or screen saver
# Configuration Profile - Security and Privacy payload > General > Require password * after sleep or screen saver begins (checked)
# Does not work
# TODO: try https://developer.apple.com/forums/thread/84324

# 5.14 Ensure system is set to hibernate
check_hibernate() {
    hibernateValue=$(pmset -g | egrep standbydelaylow | awk '{print $2}')
    if [[ "$hibernateValue" == "" ]] || [[ "$hibernateValue" -gt 900 ]]; then
        echo "$(date -u)" "5.14 passed"
        checkHibernate="true"; else
        echo "* 5.14 Ensure system is set to hibernate"
        echo "$(date -u)" "5.14 fix"
        checkHibernate="false"
    fi
}

# 5.15 Require an administrator password to access system-wide preferences
check_admin_settings() {
    adminSysPrefs="$(security authorizationdb read system.preferences 2> /dev/null | grep -A1 shared | grep -E '(true|false)' | grep -c "true")"
	# If client fails, then note category in audit file
	if [ "$adminSysPrefs" = "1" ]; then
		echo "* 5.15 Require an administrator password to access system-wide preferences"
		echo "$(date -u)" "5.15 fix"
        checkAdminSettings="false"; else
		echo "$(date -u)" "5.15 passed"
        checkAdminSettings="true"
	fi
}

# 6.3 Disable the automatic run of safe files in Safari
check_safari_run_files() {
    safariSafe="$(defaults read /Users/"$currentUser"/Library/Preferences/com.apple.Safari AutoOpenSafeDownloads)"
    if [ "$safariSafe" = "1" ]; then
        echo "* 6.3 Disable the automatic run of safe files in Safari"
        echo "$(date -u)" "6.3 fix"
        checkSafariRunFiles="false"; else
        echo "$(date -u)" "6.3 passed"
        checkSafariRunFiles="true"
    fi
}

check_software_uptodate
check_automatic_updates
check_automatic_app_updates
check_security_update
check_osx_update
check_remote_apple_events_off
check_remote_login_off
check_file_vault_enabled
check_gatekeeper_enabled
check_firewall_enabled
check_icloud_enabled
check_icloud_horangi_account
check_time_machine_autobackup
check_retain_install_logs
check_firewall_log
check_secure_home_folders
check_system_folder_permissions
check_library_folder_permissions
check_hibernate
check_admin_settings
check_safari_run_files

echo "\"Mac CIS Benchmark Checks:\" {\"SoftwareUptodate\": $checkSoftwareUptodate, \"AutomaticUpdates\": $checkAutomaticUpdates, \"AutomaticAppUpdates\": $checkAutomaticAppUpdates, \
\"SecurityUpdate\": $checkSecurityUpdate, \"OSXUpdate\": $checkOSXUpdate, \"RemoteAppleEventsOff\": $checkRemoteAppleEventsOff, \"RemoteLoginOff\": $checkRemoteLoginOff, \
\"FileVaultEnabled\": $checkFileVaultEnabled, \"GatekeeperEnabled\": $checkGatekeeperEnabled, \"FirewallEnabled\": $checkFirewallEnabled, \"iCloudEnabled\": $checkiCloudEnabled, \
\"iCloudHorangiAccount\": $checkiCloudHorangiAccount, \"TimeMachineAutobackup\": $checkTimeMachineAutobackup, \"RetainInstallLogs\": $checkRetainInstallLogs, \"FirewallLog\": $checkFirewallLog, \
\"SecureHomeFolders\": $checkSecureHomeFolders, \"SystemFolderPermission\": $checkSystemFolderPerm, \"LibraryFolderPermission\": $checkLibraryFolderPerm, \"Hibernate\": $checkHibernate, \
\"AdminSettings\": $checkAdminSettings, \"SafariRunFiles\": $checkSafariRunFiles}"
